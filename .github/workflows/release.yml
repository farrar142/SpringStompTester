name: Build and Release Jar

on:
  push: # 모든 push 이벤트에서 실행
    branches:
      - main # main 브랜치에 푸시된 경우 실행
    tags:
      - 'v*' # 태그가 v로 시작하는 경우 실행

permissions: # GITHUB_TOKEN 권한 설정
  contents: write # 릴리스 생성 및 파일 업로드를 위한 권한

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      # 소스 코드 체크아웃
      - name: Checkout code
        uses: actions/checkout@v3

      # Java 설치
      - name: Set up JDK
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      # Gradle 캐시 설정
      - name: Cache Gradle dependencies
        uses: actions/cache@v3
        with:
          path: ~/.gradle/caches
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle

      # Gradle 빌드
      - name: Build Jar
        run: ./gradlew jar

      # 빌드 결과 확인
      - name: Verify Jar
        run: ls build/libs

      # 아티팩트 업로드
      - name: Upload Jar Artifact
        uses: actions/upload-artifact@v4
        with:
          name: stomptester-jar
          path: build/libs/*.jar

  release:
    needs: build
    runs-on: ubuntu-latest

    steps:
      # 소스 코드 체크아웃
      - name: Checkout code
        uses: actions/checkout@v3

      # GitHub Release 생성
      - name: Create Release
        id: create_release
        uses: ncipollo/release-action@v1
        with:
          tag: ${{ github.ref_name }}
          name: Release ${{ github.ref_name }}
          body: |
            자동 생성된 릴리스입니다.
          draft: false
          prerelease: false
          allowUpdates: true # 기존 릴리스가 존재하면 업데이트를 허용

      # Release에 Jar 파일 첨부
      - name: Upload Jar to Release
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }} # 올바른 upload_url 전달
          asset_path: build/libs/*.jar
          asset_name: stomptester-${{ github.ref_name }}.jar
          asset_content_type: application/java-archive
